name: Build and Deploy
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: write  # Necesario para crear tags y releases
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run build
      
      # Solo en main: preparar para deploy
      - run: cp dist/index.html dist/404.html || true   # SPA fallback
        if: github.ref == 'refs/heads/main'
      - uses: actions/upload-pages-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          path: dist
      
      # Solo en develop: mensaje de éxito
      - name: Build successful (Development)
        if: github.ref == 'refs/heads/develop'
        run: echo "✅ Build completed successfully! Ready for merge to main."

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Solo ejecutar en main
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  version:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Solo versionar en main
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para obtener todos los tags
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get next version
        id: version
        run: |
          # Obtener el último tag, si no existe empezar desde 1.0.0
          LAST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n1)
          
          if [ -z "$LAST_TAG" ]; then
            NEW_VERSION="1.0.0"
          else
            # Extraer números de versión (v1.2.3 -> 1.2.3)
            VERSION_NUMBER=${LAST_TAG#v}
            MAJOR=$(echo $VERSION_NUMBER | cut -d. -f1)
            MINOR=$(echo $VERSION_NUMBER | cut -d. -f2)
            PATCH=$(echo $VERSION_NUMBER | cut -d. -f3)
            
            # Incrementar minor
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "🎯 Nueva versión: v$NEW_VERSION"
      
      - name: Create tag and release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.version.outputs.new_tag }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          
          # Crear tag
          git tag $NEW_TAG
          git push origin $NEW_TAG
          
          # Crear release
          gh release create $NEW_TAG \
            --title "Release $NEW_VERSION" \
            --notes "🚀 Automatic release $NEW_VERSION
          
          ## Changes
          - Build and deployment completed successfully
          - New features and improvements included
          
          ## Deployment
          - 🌐 Live at: https://diegoprieto.github.io/edgeFRAME-frontend/
          
          Generated automatically from main branch." \
            --latest